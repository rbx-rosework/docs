{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Rosework! The Modular, Flexible Framework for Roblox Get started Rosework is a heavily object-oriented and flexible framework built for Roblox and TypeScript .","title":"Home"},{"location":"api_reference/","text":"Under construction This page is under construction - information may be incomplete or missing. Rosework is split up into many different modules, with each serving a different functionality. Here you can find the API references for each of them: Core This module is the heart of Rosework, and provides the networking and core that most other modules require. It's main feature is the entity 1 system. It allows subentities 2 to interact with eachother across the network, especially useful for the State subentity. It also allows for communication between entities. Visit the core documentation Singleton The Rosework Singleton module provides the singleton subentity, which is useful for providing service-style functionality Visit the singleton documentation Component Tool State Submodule System The Rosework submodule system is designed to minimize the amount of code put into a single file by splitting all of that code up into many different files. You can do this using Luau's built in require() function, but it would eliminate the ability to easily use Rosework's API, or other (sub)modules from within that submodule. Visit the submodule system documentation An entity is the base of everything in Rosework. An entity should only contain one feature, and may use as many subentities as it likes. \u21a9 A subentity is anything that lives inside a normal Rosework entity created by Rosework/Core \u21a9","title":"API Reference"},{"location":"api_reference/#core","text":"This module is the heart of Rosework, and provides the networking and core that most other modules require. It's main feature is the entity 1 system. It allows subentities 2 to interact with eachother across the network, especially useful for the State subentity. It also allows for communication between entities. Visit the core documentation","title":"Core"},{"location":"api_reference/#singleton","text":"The Rosework Singleton module provides the singleton subentity, which is useful for providing service-style functionality Visit the singleton documentation","title":"Singleton"},{"location":"api_reference/#component","text":"","title":"Component"},{"location":"api_reference/#tool","text":"","title":"Tool"},{"location":"api_reference/#state","text":"","title":"State"},{"location":"api_reference/#submodule-system","text":"The Rosework submodule system is designed to minimize the amount of code put into a single file by splitting all of that code up into many different files. You can do this using Luau's built in require() function, but it would eliminate the ability to easily use Rosework's API, or other (sub)modules from within that submodule. Visit the submodule system documentation An entity is the base of everything in Rosework. An entity should only contain one feature, and may use as many subentities as it likes. \u21a9 A subentity is anything that lives inside a normal Rosework entity created by Rosework/Core \u21a9","title":"Submodule System"},{"location":"api_reference/core/","text":"Under construction This page is under construction - information may be incomplete or missing.","title":"Core"},{"location":"api_reference/singleton/","text":"Under construction This page is under construction - information may be incomplete or missing.","title":"Singleton API Reference"},{"location":"api_reference/singleton/controller/","text":"Under construction This page is under construction - information may be incomplete or missing. A Rosework controller singleton provides client-side singleton behavior and API for the parent entity.","title":"Controller"},{"location":"api_reference/singleton/service/","text":"Under construction This page is under construction - information may be incomplete or missing. A Rosework service singleton provides server-side singleton behavior and protected API for the parent entity.","title":"Service"},{"location":"getting_started/","text":"Under construction This page is under construction - information may be incomplete or missing.","title":"Getting Started"}]}